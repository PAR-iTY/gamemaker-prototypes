<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite1_lowresWoodFloor_output</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_agent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// testing random npc motion

// because of event_inherited() omission woodwall is not rotation corrected

playerDis = distance_to_object(obj_player);
playerDir = point_direction(x, y, obj_player.x, obj_player.y);

pX = lengthdir_x(playerDis, playerDir);
pY = lengthdir_y(playerDis, playerDir);

phy_position_x += pX;
phy_position_y += pY;


// get random value 0 or 1
// if 0, add delta_time to x and y
// if 1, subtract delta_time to x and y

// get a delta variation

//if (irandom(1) = 0) {
  //phy_position_x += sign(instance_find(obj_player, 0).phy_position_x - phy_position_x);
  //phy_position_y += sign(instance_find(obj_player, 0).phy_position_y - phy_position_y);
  
// direction from wall to player
//playerDir = point_direction(phy_position_x, phy_position_y, instance_find(obj_player, 0).phy_position_x, instance_find(obj_player, 0).phy_position_y);
//direction = playerDir;

//playerDis = distance_to_object(instance_find(obj_player, 0));
//speed =  400;
//path_start(path, speed, endaction, absolute);

//if (phy_speed_x &lt; 100) {
/// add to x speed
//phy_speed_x += delta_time/1000;
//trace(1);
//}

//if (phy_speed_y &lt; 100) {
/// add to y speed
//phy_speed_y += delta_time/1000;
//trace(2);
//}
  
  //motion_set(playerDir, delta_time/100);
  // does not work (alone?) with physics world...presumably this is an impulse to move,
  // but the physics forces like inertia, or a lack of angle/vector etc that im missing
  // means this is not enough to mobilise in physics world on its own.
  //mp_linear_step(obj_player.x, obj_player.y, 10, false);
    
//} else {
  //phy_position_x -= delta_time/1000;
  //phy_position_y -= delta_time/1000;
//}
// move_random(1,1);
// move_contact_all(irandom(360), 30);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>4</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>64,0</point>
    <point>64,64</point>
    <point>0,64</point>
  </PhysicsShapePoints>
</object>
